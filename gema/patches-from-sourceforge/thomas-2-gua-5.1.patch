=== src/gel_bind.c
==================================================================
--- src/gel_bind.c	(revision 11)
+++ src/gel_bind.c	(local)
@@ -161,8 +161,8 @@
   const luaL_reg *lib = lualibs;
 
   L = luaL_newstate();  /* create state */
-  luaL_openlibs(L);  /* Load the base LUA libraries */
-  if (L) {
+  if(L) {
+    luaL_openlibs(L);  /* Load the base LUA libraries */
     for (; lib->func; lib++) {
       lua_cpcall(L, lib->func, NULL); /* Load the libs in protected mode (5.1 method) */
     }
=== src/gua.c
==================================================================
--- src/gua.c	(revision 11)
+++ src/gua.c	(local)
@@ -1,5 +1,5 @@
 /*
-** $Id: gua.c,v 1.1.1.1 2003/10/19 19:19:39 rdentato Exp $
+** $Id: lua.c,v 1.157 2005/12/29 16:23:32 roberto Exp $
 ** Lua stand-alone interpreter
 ** See Copyright Notice in lua.h
 */
@@ -18,81 +18,25 @@
 #include "lualib.h"
 
 
-/*
-** generic extra include file
-*/
-#ifdef LUA_USERCONFIG
-#include LUA_USERCONFIG
-#endif
 
+static lua_State *globalL = NULL;
 
-/*
-** definition of `isatty'
-*/
-#ifdef _POSIX_C_SOURCE
-#include <unistd.h>
-#define stdin_is_tty()	isatty(0)
-#else
-#define stdin_is_tty()	1  /* assume stdin is a tty */
-#endif
+static const char *progname = LUA_PROGNAME;
 
+int gel_init(lua_State* L);
 
 
-#ifndef PROMPT
-#define PROMPT		"> "
-#endif
-
-
-#ifndef PROMPT2
-#define PROMPT2		">> "
-#endif
-
-#ifndef PROGNAME
-#define PROGNAME	"lua"
-#endif
-
-#ifndef lua_userinit
-#define lua_userinit(L)		openstdlibs(L)
-#endif
-
-
-#ifndef LUA_EXTRALIBS
-#define LUA_EXTRALIBS	/* empty */
-#endif
-
-
-static lua_State *L = NULL;
-
-static const char *progname = PROGNAME;
-
-
-
-static const luaL_reg lualibs[] = {
-  {"base", luaopen_base},
-  {"table", luaopen_table},
-  {"io", luaopen_io},
-  {"string", luaopen_string},
-  {"math", luaopen_math},
-  {"debug", luaopen_debug},
-  {"loadlib", luaopen_loadlib},
-  /* add your libraries here */
-  LUA_EXTRALIBS
-  {NULL, NULL}
-};
-
-
-
-static void lstop (lua_State *l, lua_Debug *ar) {
+static void lstop (lua_State *L, lua_Debug *ar) {
   (void)ar;  /* unused arg. */
-  lua_sethook(l, NULL, 0, 0);
-  luaL_error(l, "interrupted!");
+  lua_sethook(L, NULL, 0, 0);
+  luaL_error(L, "interrupted!");
 }
 
 
 static void laction (int i) {
   signal(i, SIG_DFL); /* if another SIGINT happens before lstop,
                               terminate process (default action) */
-  lua_sethook(L, lstop, LUA_MASKCALL | LUA_MASKRET | LUA_MASKCOUNT, 1);
+  lua_sethook(globalL, lstop, LUA_MASKCALL | LUA_MASKRET | LUA_MASKCOUNT, 1);
 }
 
 
@@ -100,13 +44,15 @@
   fprintf(stderr,
   "usage: %s [options] [script [args]].\n"
   "Available options are:\n"
-  "  -        execute stdin as a file\n"
-  "  -e stat  execute string `stat'\n"
-  "  -i       enter interactive mode after executing `script'\n"
-  "  -l name  load and run library `name'\n"
+  "  -e stat  execute string " LUA_QL("stat") "\n"
+  "  -l name  require library " LUA_QL("name") "\n"
+  "  -i       enter interactive mode after executing " LUA_QL("script") "\n"
   "  -v       show version information\n"
-  "  --       stop handling options\n" ,
+  "  --       stop handling options\n"
+  "  -        execute stdin and stop handling options\n"
+  ,
   progname);
+  fflush(stderr);
 }
 
 
@@ -117,11 +63,10 @@
 }
 
 
-static int report (int status) {
-  const char *msg;
-  if (status) {
-    msg = lua_tostring(L, -1);
-    if (msg == NULL) msg = "(error with no message)";
+static int report (lua_State *L, int status) {
+  if (status && !lua_isnil(L, -1)) {
+    const char *msg = lua_tostring(L, -1);
+    if (msg == NULL) msg = "(error object is not a string)";
     l_message(progname, msg);
     lua_pop(L, 1);
   }
@@ -129,16 +74,35 @@
 }
 
 
-static int lcall (int narg, int clear) {
+static int traceback (lua_State *L) {
+  lua_getfield(L, LUA_GLOBALSINDEX, "debug");
+  if (!lua_istable(L, -1)) {
+    lua_pop(L, 1);
+    return 1;
+  }
+  lua_getfield(L, -1, "traceback");
+  if (!lua_isfunction(L, -1)) {
+    lua_pop(L, 2);
+    return 1;
+  }
+  lua_pushvalue(L, 1);  /* pass error message */
+  lua_pushinteger(L, 2);  /* skip this function and traceback */
+  lua_call(L, 2, 1);  /* call debug.traceback */
+  return 1;
+}
+
+
+static int docall (lua_State *L, int narg, int clear) {
   int status;
   int base = lua_gettop(L) - narg;  /* function index */
-  lua_pushliteral(L, "_TRACEBACK");
-  lua_rawget(L, LUA_GLOBALSINDEX);  /* get traceback function */
+  lua_pushcfunction(L, traceback);  /* push traceback function */
   lua_insert(L, base);  /* put it under chunk and args */
   signal(SIGINT, laction);
   status = lua_pcall(L, narg, (clear ? 0 : LUA_MULTRET), base);
   signal(SIGINT, SIG_DFL);
   lua_remove(L, base);  /* remove traceback function */
+  /* force a complete garbage collection in case of errors */
+  if (status != 0) lua_gc(L, LUA_GCCOLLECT, 0);
   return status;
 }
 
@@ -149,253 +113,207 @@
 }
 
 
-static void getargs (char *argv[], int n) {
+static int getargs (lua_State *L, char **argv, int n) {
+  int narg;
   int i;
-  lua_newtable(L);
-  for (i=0; argv[i]; i++) {
-    lua_pushnumber(L, i - n);
+  int argc = 0;
+  while (argv[argc]) argc++;  /* count total number of arguments */
+  narg = argc - (n + 1);  /* number of arguments to the script */
+  luaL_checkstack(L, narg + 3, "too many arguments to script");
+  for (i=n+1; i < argc; i++)
     lua_pushstring(L, argv[i]);
-    lua_rawset(L, -3);
+  lua_createtable(L, narg, n + 1);
+  for (i=0; i < argc; i++) {
+    lua_pushstring(L, argv[i]);
+    lua_rawseti(L, -2, i - n);
   }
-  /* arg.n = maximum index in table `arg' */
-  lua_pushliteral(L, "n");
-  lua_pushnumber(L, i-n-1);
-  lua_rawset(L, -3);
+  return narg;
 }
 
 
-static int docall (int status) {
-  if (status == 0) status = lcall(0, 1);
-  return report(status);
+static int dofile (lua_State *L, const char *name) {
+  int status = luaL_loadfile(L, name) || docall(L, 0, 1);
+  return report(L, status);
 }
 
 
-static int file_input (const char *name) {
-  return docall(luaL_loadfile(L, name));
+static int dostring (lua_State *L, const char *s, const char *name) {
+  int status = luaL_loadbuffer(L, s, strlen(s), name) || docall(L, 0, 1);
+  return report(L, status);
 }
 
 
-static int dostring (const char *s, const char *name) {
-  return docall(luaL_loadbuffer(L, s, strlen(s), name));
+static int dolibrary (lua_State *L, const char *name) {
+  lua_getglobal(L, "require");
+  lua_pushstring(L, name);
+  return report(L, lua_pcall(L, 1, 0, 0));
 }
 
 
-static int load_file (const char *name) {
-  lua_pushliteral(L, "require");
-  lua_rawget(L, LUA_GLOBALSINDEX);
-  if (!lua_isfunction(L, -1)) {  /* no `require' defined? */
-    lua_pop(L, 1);
-    return file_input(name);
-  }
-  else {
-    lua_pushstring(L, name);
-    return report(lcall(1, 1));
-  }
-}
-
-
-/*
-** this macro can be used by some `history' system to save lines
-** read in manual input
-*/
-#ifndef lua_saveline
-#define lua_saveline(L,line)	/* empty */
-#endif
-
-
-/*
-** this macro defines a function to show the prompt and reads the
-** next line for manual input
-*/
-#ifndef lua_readline
-#define lua_readline(L,prompt)		readline(L,prompt)
-
-/* maximum length of an input line */
-#ifndef MAXINPUT
-#define MAXINPUT	512
-#endif
-
-
-static int readline (lua_State *l, const char *prompt) {
-  static char buffer[MAXINPUT];
-  if (prompt) {
-    fputs(prompt, stdout);
-    fflush(stdout);
-  }
-  if (fgets(buffer, sizeof(buffer), stdin) == NULL)
-    return 0;  /* read fails */
-  else {
-    lua_pushstring(l, buffer);
-    return 1;
-  }
-}
-
-#endif
-
-
-static const char *get_prompt (int firstline) {
-  const char *p = NULL;
-  lua_pushstring(L, firstline ? "_PROMPT" : "_PROMPT2");
-  lua_rawget(L, LUA_GLOBALSINDEX);
+static const char *get_prompt (lua_State *L, int firstline) {
+  const char *p;
+  lua_getfield(L, LUA_GLOBALSINDEX, firstline ? "_PROMPT" : "_PROMPT2");
   p = lua_tostring(L, -1);
-  if (p == NULL) p = (firstline ? PROMPT : PROMPT2);
+  if (p == NULL) p = (firstline ? LUA_PROMPT : LUA_PROMPT2);
   lua_pop(L, 1);  /* remove global */
   return p;
 }
 
 
-static int incomplete (int status) {
-  if (status == LUA_ERRSYNTAX &&
-         strstr(lua_tostring(L, -1), "near `<eof>'") != NULL) {
-    lua_pop(L, 1);
-    return 1;
+static int incomplete (lua_State *L, int status) {
+  if (status == LUA_ERRSYNTAX) {
+    size_t lmsg;
+    const char *msg = lua_tolstring(L, -1, &lmsg);
+    const char *tp = msg + lmsg - (sizeof(LUA_QL("<eof>")) - 1);
+    if (strstr(msg, LUA_QL("<eof>")) == tp) {
+      lua_pop(L, 1);
+      return 1;
+    }
   }
+  return 0;  /* else... */
+}
+
+
+static int pushline (lua_State *L, int firstline) {
+  char buffer[LUA_MAXINPUT];
+  char *b = buffer;
+  size_t l;
+  const char *prmt = get_prompt(L, firstline);
+  if (lua_readline(L, b, prmt) == 0)
+    return 0;  /* no input */
+  l = strlen(b);
+  if (l > 0 && b[l-1] == '\n')  /* line ends with newline? */
+    b[l-1] = '\0';  /* remove it */
+  if (firstline && b[0] == '=')  /* first line starts with `=' ? */
+    lua_pushfstring(L, "return %s", b+1);  /* change it to `return' */
   else
-    return 0;
+    lua_pushstring(L, b);
+  lua_freeline(L, b);
+  return 1;
 }
 
 
-static int load_string (void) {
+static int loadline (lua_State *L) {
   int status;
   lua_settop(L, 0);
-  if (lua_readline(L, get_prompt(1)) == 0)  /* no input? */
-    return -1;
-  if (lua_tostring(L, -1)[0] == '=') {  /* line starts with `=' ? */
-    lua_pushfstring(L, "return %s", lua_tostring(L, -1)+1);/* `=' -> `return' */
-    lua_remove(L, -2);  /* remove original line */
-  }
+  if (!pushline(L, 1))
+    return -1;  /* no input */
   for (;;) {  /* repeat until gets a complete line */
     status = luaL_loadbuffer(L, lua_tostring(L, 1), lua_strlen(L, 1), "=stdin");
-    if (!incomplete(status)) break;  /* cannot try to add lines? */
-    if (lua_readline(L, get_prompt(0)) == 0)  /* no more input? */
+    if (!incomplete(L, status)) break;  /* cannot try to add lines? */
+    if (!pushline(L, 0))  /* no more input? */
       return -1;
-    lua_concat(L, lua_gettop(L));  /* join lines */
+    lua_pushliteral(L, "\n");  /* add a new line... */
+    lua_insert(L, -2);  /* ...between the two lines */
+    lua_concat(L, 3);  /* join them */
   }
-  lua_saveline(L, lua_tostring(L, 1));
+  lua_saveline(L, 1);
   lua_remove(L, 1);  /* remove line */
   return status;
 }
 
 
-static void manual_input (void) {
+static void dotty (lua_State *L) {
   int status;
   const char *oldprogname = progname;
   progname = NULL;
-  while ((status = load_string()) != -1) {
-    if (status == 0) status = lcall(0, 0);
-    report(status);
+  while ((status = loadline(L)) != -1) {
+    if (status == 0) status = docall(L, 0, 0);
+    report(L, status);
     if (status == 0 && lua_gettop(L) > 0) {  /* any result to print? */
       lua_getglobal(L, "print");
       lua_insert(L, 1);
       if (lua_pcall(L, lua_gettop(L)-1, 0, 0) != 0)
-        l_message(progname, lua_pushfstring(L, "error calling `print' (%s)",
-                                               lua_tostring(L, -1)));
+        l_message(progname, lua_pushfstring(L,
+                               "error calling " LUA_QL("print") " (%s)",
+                               lua_tostring(L, -1)));
     }
   }
   lua_settop(L, 0);  /* clear stack */
   fputs("\n", stdout);
+  fflush(stdout);
   progname = oldprogname;
 }
 
 
-static int handle_argv (char *argv[], int *interactive) {
-  if (argv[1] == NULL) {  /* no more arguments? */
-    if (stdin_is_tty()) {
-      print_version();
-      manual_input();
-    }
-    else
-      file_input(NULL);  /* executes stdin as a file */
-  }
-  else {  /* other arguments; loop over them */
-    int i;
-    for (i = 1; argv[i] != NULL; i++) {
-      if (argv[i][0] != '-') break;  /* not an option? */
-      switch (argv[i][1]) {  /* option */
-        case '-': {  /* `--' */
-          if (argv[i][2] != '\0') {
-            print_usage();
-            return 1;
-          }
-          i++;  /* skip this argument */
-          goto endloop;  /* stop handling arguments */
+static int handle_script (lua_State *L, char **argv, int n) {
+  int status;
+  const char *fname;
+  int narg = getargs(L, argv, n);  /* collect arguments */
+  lua_setglobal(L, "arg");
+  fname = argv[n];
+  if (strcmp(fname, "-") == 0 && strcmp(argv[n-1], "--") != 0) 
+    fname = NULL;  /* stdin */
+  status = luaL_loadfile(L, fname);
+  lua_insert(L, -(narg+1));
+  if (status == 0)
+    status = docall(L, narg, 0);
+  else
+    lua_pop(L, narg);      
+  return report(L, status);
+}
+
+
+static int collectargs (char **argv, int *pi, int *pv, int *pe) {
+  int i;
+  for (i = 1; argv[i] != NULL; i++) {
+    if (argv[i][0] != '-')  /* not an option? */
+        return i;
+    switch (argv[i][1]) {  /* option */
+      case '-': return (argv[i+1] != NULL ? i+1 : 0);
+      case '\0': return i;
+      case 'i': *pi = 1;  /* go through */
+      case 'v': *pv = 1; break;
+      case 'e': *pe = 1;  /* go through */
+      case 'l':
+        if (argv[i][2] == '\0') {
+          i++;
+          if (argv[i] == NULL) return -1;
         }
-        case '\0': {
-          file_input(NULL);  /* executes stdin as a file */
-          break;
-        }
-        case 'i': {
-          *interactive = 1;
-          break;
-        }
-        case 'v': {
-          print_version();
-          break;
-        }
-        case 'e': {
-          const char *chunk = argv[i] + 2;
-          if (*chunk == '\0') chunk = argv[++i];
-          if (chunk == NULL) {
-            print_usage();
-            return 1;
-          }
-          if (dostring(chunk, "=<command line>") != 0)
-            return 1;
-          break;
-        }
-        case 'l': {
-          const char *filename = argv[i] + 2;
-          if (*filename == '\0') filename = argv[++i];
-          if (filename == NULL) {
-            print_usage();
-            return 1;
-          }
-          if (load_file(filename))
-            return 1;  /* stop if file fails */
-          break;
-        }
-        case 'c': {
-          l_message(progname, "option `-c' is deprecated");
-          break;
-        }
-        case 's': {
-          l_message(progname, "option `-s' is deprecated");
-          break;
-        }
-        default: {
-          print_usage();
-          return 1;
-        }
-      }
-    } endloop:
-    if (argv[i] != NULL) {
-      const char *filename = argv[i];
-      getargs(argv, i);  /* collect arguments */
-      lua_setglobal(L, "arg");
-      return file_input(filename);  /* stop scanning arguments */
+        break;
+      default: return -1;  /* invalid option */
     }
   }
   return 0;
 }
 
 
-static void openstdlibs (lua_State *l) {
-  const luaL_reg *lib = lualibs;
-  for (; lib->func; lib++) {
-    lib->func(l);  /* open library */
-    lua_settop(l, 0);  /* discard any results */
+static int runargs (lua_State *L, char **argv, int n) {
+  int i;
+  for (i = 1; i < n; i++) {
+    if (argv[i] == NULL) continue;
+    lua_assert(argv[i][0] == '-');
+    switch (argv[i][1]) {  /* option */
+      case 'e': {
+        const char *chunk = argv[i] + 2;
+        if (*chunk == '\0') chunk = argv[++i];
+        lua_assert(chunk != NULL);
+        if (dostring(L, chunk, "=(command line)") != 0)
+          return 1;
+        break;
+      }
+      case 'l': {
+        const char *filename = argv[i] + 2;
+        if (*filename == '\0') filename = argv[++i];
+        lua_assert(filename != NULL);
+        if (dolibrary(L, filename))
+          return 1;  /* stop if file fails */
+        break;
+      }
+      default: break;
+    }
   }
-  gel_init(l);
+  return 0;
 }
 
 
-static int handle_luainit (void) {
+static int handle_luainit (lua_State *L) {
   const char *init = getenv("LUA_INIT");
   if (init == NULL) return 0;  /* status OK */
   else if (init[0] == '@')
-    return file_input(init+1);
+    return dofile(L, init+1);
   else
-    return dostring(init, "=LUA_INIT");
+    return dostring(L, init, "=LUA_INIT");
 }
 
 
@@ -406,36 +324,58 @@
 };
 
 
-static int pmain (lua_State *l) {
-  struct Smain *s = (struct Smain *)lua_touserdata(l, 1);
-  int status;
-  int interactive = 0;
-  if (s->argv[0] && s->argv[0][0]) progname = s->argv[0];
-  L = l;
-  lua_userinit(l);  /* open libraries */
-  status = handle_luainit();
-  if (status == 0) {
-    status = handle_argv(s->argv, &interactive);
-    if (status == 0 && interactive) manual_input();
+static int pmain (lua_State *L) {
+  struct Smain *s = (struct Smain *)lua_touserdata(L, 1);
+  char **argv = s->argv;
+  int script;
+  int has_i = 0, has_v = 0, has_e = 0;
+  globalL = L;
+  if (argv[0] && argv[0][0]) progname = argv[0];
+  lua_gc(L, LUA_GCSTOP, 0);  /* stop collector during initialization */
+  luaL_openlibs(L);  /* open libraries */
+  gel_init(L);
+  lua_gc(L, LUA_GCRESTART, 0);
+  s->status = handle_luainit(L);
+  if (s->status != 0) return 0;
+  script = collectargs(argv, &has_i, &has_v, &has_e);
+  if (script < 0) {  /* invalid args? */
+    print_usage();
+    s->status = 1;
+    return 0;
   }
-  s->status = status;
+  if (has_v) print_version();
+  s->status = runargs(L, argv, (script > 0) ? script : s->argc);
+  if (s->status != 0) return 0;
+  if (script)
+    s->status = handle_script(L, argv, script);
+  if (s->status != 0) return 0;
+  if (has_i)
+    dotty(L);
+  else if (script == 0 && !has_e && !has_v) {
+    if (lua_stdin_is_tty()) {
+      print_version();
+      dotty(L);
+    }
+    else dofile(L, NULL);  /* executes stdin as a file */
+  }
   return 0;
 }
 
 
-int main (int argc, char *argv[]) {
+int main (int argc, char **argv) {
   int status;
   struct Smain s;
-  lua_State *l = lua_open();  /* create state */
-  if (l == NULL) {
+  lua_State *L = luaL_newstate();  /* create state */
+  if (L == NULL) {
     l_message(argv[0], "cannot create state: not enough memory");
     return EXIT_FAILURE;
   }
   s.argc = argc;
   s.argv = argv;
-  status = lua_cpcall(l, &pmain, &s);
-  report(status);
-  lua_close(l);
+  status = lua_cpcall(L, &pmain, &s);
+  report(L, status);
+  lua_close(L);
   return (status || s.status) ? EXIT_FAILURE : EXIT_SUCCESS;
 }
 
+
